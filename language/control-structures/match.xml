<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: dcbd255b074257dacdc8d402c5cc5e31c6917591 Maintainer: Jader Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>match</title>
 <?phpdoc print-version-for="match"?>
 <para>
  <literal>match</literal> 表达式根据值的标识检查分支计算。
  与 <literal>switch</literal> 语句类似，
  <literal>match</literal> 表达式有一个主题表达式，用于与多个备选项进行比较。
  与 <literal>switch</literal> 不同的是，
  它的计算结果非常类似于三元表达式。
  不像 <literal>switch</literal>，比较是绝对相等检查 (===) 
  (<code>===</code>)，而不是弱相等检查 (<code>==</code>)。
  Match 表达式从 PHP 8.0.0 开始可用。
 </para>

 <example>
  <title><literal>match</literal> 表达式的结构</title>
  <programlisting role="php">
<![CDATA[
<?php
$return_value = match (subject_expression) {
    single_conditional_expression => return_expression,
    conditional_expression1, conditional_expression2 => return_expression,
};
?>
]]>
  </programlisting>

  <note>
   <simpara>
    <literal>match</literal> 表达式的结果是不需要使用。
   </simpara>
  </note>
  <note>
   <simpara>
    <literal>match</literal> 表达式 <emphasis>必须</emphasis>
    以分号结束 <literal>;</literal>。
   </simpara>
  </note>
 </example>

 <para>
  <literal>match</literal> 表达式类似于
  <literal>switch</literal> 语句，但有一些关键的区别：
  
  <itemizedlist>
   <listitem>
    <simpara>
     <literal>match</literal> 是严格比较 (<code>===</code>)，
     而不是像 switch 语句那样宽松比较。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>match</literal> 表达式返回一个值。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>match</literal> 分支是不会像
     <literal>switch</literal> 语句那样落入后面的情况。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>match</literal> 表达式必须是详尽的。
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  如同 <literal>switch</literal> 语句，<literal>match</literal> 表达式是一个接一个匹配地执行的。
  一开始，没有执行任何代码。
  只有在之前所有条件表达式都无法匹配主题表达式时，才计算条件表达式。
  只有与匹配的条件表达式对应的返回表达式才会被计算。
  例如:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    foo() => ...,
    $this->bar() => ..., // $this->bar() isn't called if foo() === $x
    $this->baz => beep(), // beep() isn't called unless $x === $this->baz
    // etc.
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  <literal>match</literal> 分支可以包含用逗号分隔的多个表达式。
  这是一个逻辑“或”，是具有相同右侧的多个匹配分支的简写。
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    // This match arm:
    $a, $b, $c => 5,
    // Is equivalent to these three match arms:
    $a => 5,
    $b => 5,
    $c => 5,
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  一种特殊情况是 <literal>default</literal> 模式。
  这个模式匹配以前没有匹配过的任何东西。
  例如：
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expressionResult = match ($condition) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    多个默认模式将引发 <constant>E_FATAL_ERROR</constant> 错误。
   </simpara>
  </note>
 </para>

 <para>
  <literal>match</literal> 表达式必须是详尽的。 
  如果主题表达式未被任何匹配分支处理，
  则抛出 <classname>UnhandledMatchError</classname>。
 </para>

 <example>
  <title>未处理的 match 表达式示例</title>
  <programlisting role="php">
<![CDATA[
<?php
$condition = 5;
try {
    match ($condition) {
        1, 2 => foo(),
        3, 4 => bar(),
    };
} catch (\UnhandledMatchError $e) {
    var_dump($e);
}
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(UnhandledMatchError)#1 (7) {
  ["message":protected]=>
  string(33) "Unhandled match value of type int"
  ["string":"Error":private]=>
  string(0) ""
  ["code":protected]=>
  int(0)
  ["file":protected]=>
  string(9) "/in/ICgGK"
  ["line":protected]=>
  int(6)
  ["trace":"Error":private]=>
  array(0) {
  }
  ["previous":"Error":private]=>
  NULL
}
]]>
  </screen>
 </example>

 <sect2>
  <title>使用 match 表达式处理非标识检查</title>
  <para>
   通过使用 <code>true</code> 作为主题表达式，
   可以使用 <literal>match</literal> 表达式来处理非标识条件情况。
  </para>

  <example>
   <title>使用通用 match 表达式分支的整数范围</title>
   <programlisting role="php">
<![CDATA[
<?php
$age = 23;
$result = match (true) {
    $age >= 65 => 'senior',
    $age >= 25 => 'adult',
    $age >= 18 => 'young adult',
    default => 'kid',
};
var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(11) "young adult"
]]>
   </screen>
  </example>

  <example>
   <title>使用通用 match 表达式分支的字符串内容</title>
   <programlisting role="php">
<![CDATA[
<?php
$text = 'Bienvenue chez nous';
$result = match (true) {
    str_contains($text, 'Welcome') || str_contains($text, 'Hello') => 'en',
    str_contains($text, 'Bienvenue') || str_contains($text, 'Bonjour') => 'fr',
    // ...
};
var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(2) "fr"
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->